#version 330 core

layout (location = 0) out vec4 FragColor;
layout (location = 1) out vec4 FragColorHDR;


in float Height;
in vec3 Position;
in vec3 fragPos;
in vec2 UVs;
in vec3 outNormals;

in vec4 FragPosLightSpace;
in vec3 TangentViewPos;
in vec3 TangentFragPos;
in vec3 LightDirection_tangentspace;

uniform vec3 viewPos;
uniform vec3 light_direction;
uniform vec3 light_color;
uniform vec3 light_specular;
uniform vec3 light_diffuse;

struct PointLight {
    vec3 position;
    float constant;
    float linear;
    float quadratic;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};
uniform int NR_POINTS_LIGHTS;
uniform PointLight pointLights[99];

uniform sampler2D shadowMap;

uniform sampler2D basecolor1;
uniform sampler2D normalmap1;
uniform sampler2D basecolor2;
uniform sampler2D normalmap2;
uniform sampler2D basecolor3;
uniform sampler2D normalmap3;
uniform sampler2D blendmap;

vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir, vec3 ColFinal);

float ShadowCalculation(vec4 fragPosLightSpace)
{
    // perform perspective divide
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
    
    // transform to [0,1] range
    projCoords = projCoords * 0.5 + 0.5;
    
    // get closest depth value from light's perspective (using [0,1] range fragPosLight as coords)
    float closestDepth = texture(shadowMap, projCoords.xy).r; 
    
    // get depth of current fragment from light's perspective
    float currentDepth = projCoords.z;
    
    // calculate bias (based on depth map resolution and slope)
    vec3 normal = normalize(outNormals);
    vec3 lightDir = normalize(-light_direction);
    float bias = max(0.05 * (1.0 - dot(normal, lightDir)), 0.005);
    
    // check whether current frag pos is in shadow
    // float shadow = currentDepth - bias > closestDepth  ? 1.0 : 0.0;
    // PCF
    
    float shadow = 0.0;
    vec2 texelSize = 1.0 / textureSize(shadowMap, 0);
    for(int x = -1; x <= 1; ++x)
    {
        for(int y = -1; y <= 1; ++y)
        {
            float pcfDepth = texture(shadowMap, projCoords.xy + vec2(x, y) * texelSize).r; 
            shadow += currentDepth - bias > pcfDepth  ? 1.0 : 0.0;        
        }    
    }
    shadow /= 9.0;
    
    if(projCoords.z > 1.0)
        shadow = 0.0;
        
    return shadow;
}

void main()
{
    vec3 blendData = texture(blendmap, UVs).rgb;
    float vBlendr = blendData.r;
    float vBlendg = blendData.g;
    float vBlendb = blendData.b;

    vec3 colorR = texture(basecolor1, UVs*8).rgb * vBlendr;
    vec3 colorG = texture(basecolor2, UVs*8).rgb * vBlendg;
    vec3 colorB = texture(basecolor3, UVs*8).rgb * vBlendb;

    vec3 normalR = texture(normalmap1, UVs*8).rgb * vBlendr;
    vec3 normalG = texture(normalmap2, UVs*8).rgb * vBlendg;
    vec3 normalB = texture(normalmap3, UVs*8).rgb * vBlendb;

    vec3 ColorFinal = colorR + colorG + colorB;
    vec3 NormalFinal = normalR + normalG + normalB;
    NormalFinal = normalize(NormalFinal * 2.0 - 1.0);
    vec3 Normals22 = normalize(outNormals * 2.0 - 1.0);

    vec3 viewDir = normalize(TangentViewPos - TangentFragPos);
    vec3 lightDir = normalize(-light_direction);
    //vec3 lightDir = normalize(LightDirection_tangentspace - TangentFragPos);
    vec3 ambient = light_color * ColorFinal;

    float diff = max(dot(lightDir, NormalFinal), 0.0);
	vec3 diffuse = light_diffuse * diff * ColorFinal;

    vec3 reflectDir = reflect(-lightDir, NormalFinal);
	vec3 halfwayDir = normalize(lightDir + viewDir);
	float spec = pow(max(dot(NormalFinal, halfwayDir), 0.0), 3.0);

    vec3 specular = light_specular * spec * ColorFinal * 0.3;

    float shadow = ShadowCalculation(FragPosLightSpace);
    shadow *= 1.4f;

    //vec3 result = (ambient + diffuse + specular);
    vec3 result = (ambient + (1.0 - shadow) * (diffuse + specular));

    for(int i = 0; i < NR_POINTS_LIGHTS; i++)
    {
        result += CalcPointLight(pointLights[i], NormalFinal, fragPos, viewDir, ColorFinal);  
    }

   FragColor = vec4(result, 1.0f);
   FragColorHDR = vec4(0.0f, 0.0f, 0.0f, 1.0f);
   //FragColor = vec4(1.0f);
}

vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir, vec3 ColFinal)
{
    vec3 lightDir = normalize(light.position - fragPos);
    float diff = max(dot(normal, lightDir), 0.0);

    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32.0);

    // attenuation
    float distance = length(light.position - fragPos);
    float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));    
    
    //result
    vec3 ambient = light.ambient * ColFinal;
    vec3 diffuse = light.diffuse * diff * ColFinal;
    vec3 specular = light.specular * spec * ColFinal;
    ambient *= attenuation;
    diffuse *= attenuation;
    specular *= attenuation;
    return (ambient + diffuse + specular);
}