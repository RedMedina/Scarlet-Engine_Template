#version 330 core

in vec2 UV;
in vec3 fragPos;
in vec3 TangentViewPos;
in vec3 TangentFragPos;
in vec3 LightDirection_tangentspace;
in vec3 outNormals;
in vec4 FragPosLightSpace;

layout (location = 0) out vec4 FragColor;
layout (location = 1) out vec4 FragColorHDR;

// @uniform_name basecolor
// @uniform_type int
uniform sampler2D basecolor;

// @uniform_name normalmap
// @uniform_type int
uniform sampler2D normalmap;

// @uniform_name emissivemap
// @uniform_type int
uniform sampler2D emissivemap;

// @uniform_name HDR
// @uniform_type int
uniform int HDR;

// @uniform_name EmissionColor
// @uniform_type vec3
uniform vec3 EmissionColor;

// @uniform_name exposure
// @uniform_type float
uniform float exposure;

// @uniform_name light_direction
// @uniform_type vec3
uniform vec3 light_direction;

// @uniform_name light_color
// @uniform_type vec3
uniform vec3 light_color;

// @uniform_name light_specular
// @uniform_type vec3
uniform vec3 light_specular;

// @uniform_name light_diffuse
// @uniform_type vec3
uniform vec3 light_diffuse;

// @uniform_name viewPos
// @uniform_type vec3
uniform vec3 viewPos;

// @uniform_name shadowMap
// @uniform_type int
uniform sampler2D shadowMap;

struct PointLight {
    vec3 position;
    float constant;
    float linear;
    float quadratic;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

// @uniform_name NR_POINTS_LIGHTS
// @uniform_type int
uniform int NR_POINTS_LIGHTS;
uniform PointLight pointLights[99];

float ShadowCalculation(vec4 fragPosLightSpace)
{
    // perform perspective divide
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
    
    // transform to [0,1] range
    projCoords = projCoords * 0.5 + 0.5;
    
    // get closest depth value from light's perspective (using [0,1] range fragPosLight as coords)
    float closestDepth = texture(shadowMap, projCoords.xy).r; 
    
    // get depth of current fragment from light's perspective
    float currentDepth = projCoords.z;
    
    // calculate bias (based on depth map resolution and slope)
    vec3 normal = normalize(outNormals);
    vec3 lightDir = normalize(light_direction - fragPos);
    float bias = max(0.05 * (1.0 - dot(normal, lightDir)), 0.005);
    
    // check whether current frag pos is in shadow
    // float shadow = currentDepth - bias > closestDepth  ? 1.0 : 0.0;
    // PCF
    
    float shadow = 0.0;
    vec2 texelSize = 1.0 / textureSize(shadowMap, 0);
    for(int x = -1; x <= 1; ++x)
    {
        for(int y = -1; y <= 1; ++y)
        {
            float pcfDepth = texture(shadowMap, projCoords.xy + vec2(x, y) * texelSize).r; 
            shadow += currentDepth - bias > pcfDepth  ? 1.0 : 0.0;        
        }    
    }
    shadow /= 9.0;
    
    if(projCoords.z > 1.0)
        shadow = 0.0;
        
    return shadow;
}

float ShadowCalculationProj(vec4 fragPosLightSpace)
{
    // Realiza la proyección perspectiva dividiendo por w
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
    
    // Transforma las coordenadas proyectadas al rango [0,1]
    projCoords = projCoords * 0.5 + 0.5;
    
    // Obtiene la profundidad más cercana desde la perspectiva de la luz
    float closestDepth = texture(shadowMap, projCoords.xy).r; 
    
    // Obtiene la profundidad del fragmento actual desde la perspectiva de la luz
    float currentDepth = projCoords.z;
    
    // Calcula el sesgo (bias) para evitar problemas de auto-sombreado y acné de sombras
    vec3 normal = normalize(outNormals);
    vec3 lightDir = normalize(light_direction - fragPos);
    float bias = max(0.05 * (1.0 - dot(normal, lightDir)), 0.005);
    
    // Comprueba si el fragmento actual está en sombra
    float shadow = 0.0;
    vec2 texelSize = 1.0 / textureSize(shadowMap, 0);
    for(int x = -1; x <= 1; ++x)
    {
        for(int y = -1; y <= 1; ++y)
        {
            float pcfDepth = texture(shadowMap, projCoords.xy + vec2(x, y) * texelSize * currentDepth).r; 
            shadow += currentDepth - bias > pcfDepth  ? 1.0 : 0.0;        
        }    
    }
    shadow /= 9.0;
    
    // Si la coordenada de proyección z es mayor que 1.0, el fragmento está detrás de la luz y no se proyecta sombra
    if(projCoords.z > 1.0)
        shadow = 0.0;
        
    return shadow;
}

vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir);

const bool gamma = true;

void main()
{
	vec4 color = texture(basecolor, UV);
	vec3 normal_tex;
    if (textureSize(normalmap, 0) != 0)
    {
        normal_tex = texture(normalmap, UV).rgb;
        normal_tex = normalize(normal_tex * 2.0 - 1.0);
    }
    else {
       normal_tex = outNormals;
       normal_tex = normalize(normal_tex);
    }

	vec3 viewDir = normalize(TangentViewPos - TangentFragPos);
	//vec3 lightDir = normalize(-light_direction);
	vec3 lightDir = normalize(LightDirection_tangentspace - TangentFragPos);
	
	vec3 ambient = light_color * color.rgb;

	float diff = max(dot(lightDir, normal_tex), 0.0);
	vec3 diffuse = light_diffuse * diff * color.rgb;

	vec3 reflectDir = reflect(-lightDir, normal_tex);
	vec3 halfwayDir = normalize(lightDir + viewDir);
	float spec = pow(max(dot(normal_tex, halfwayDir), 0.0), 3.0);

	vec3 specular = light_specular * spec * color.rgb * 0.3;

    float shadow = ShadowCalculation(FragPosLightSpace);

    vec3 result = (ambient + (1.0 - shadow) * (diffuse + specular));

    //vec3 result = (ambient + diffuse + specular);

    for(int i = 0; i < NR_POINTS_LIGHTS; i++)
    {
        result += CalcPointLight(pointLights[i], normal_tex, fragPos, viewDir);  
    }

    if(HDR == 1)
    {
        if (textureSize(emissivemap, 0) != 0)
        {
             vec3 emissiveColor = texture(emissivemap, UV).rgb;
             emissiveColor *= exposure;
             FragColorHDR = vec4(emissiveColor, color.a);
             FragColor = vec4(result, color.a);
        }
        else
        {
            result *= exposure;
            FragColorHDR = vec4(result, color.a);
            FragColor = vec4(0.0, 0.0, 0.0, 1.0f);
        }
       
    }
    else if (HDR == 0)
    {
        FragColor = vec4(result, color.a);
        FragColorHDR = vec4(0.0, 0.0, 0.0, 1.0f);
    }
}

vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir)
{
    vec3 lightDir = normalize(light.position - fragPos);
    float diff = max(dot(normal, lightDir), 0.0);

    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32.0);

    // attenuation
    float distance = length(light.position - fragPos);
    float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));    
    
    //result
    vec3 ambient = light.ambient * vec3(texture(basecolor, UV));
    vec3 diffuse = light.diffuse * diff * vec3(texture(basecolor, UV));
    vec3 specular = light.specular * spec * vec3(texture(basecolor, UV));
    ambient *= attenuation;
    diffuse *= attenuation;
    specular *= attenuation;
    return (ambient + diffuse + specular);
}
